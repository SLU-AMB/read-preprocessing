*/
* -------------------------------------------------
* SLU-AMB Config file
* -------------------------------------------------
* Pre-processing of fastq files from Illumina 16S rRNA sequencing
* Includes fastp filtering and trimming (removal of adapters and quality check)
* and downstream DADA2 analysis resulting in a phyloseq file for further
* manipulation in R.
*/

// Global default params, used in configs
params {
    version = "0.0.1" //Pipeline version
    container = "" //Container for software used
    nf_required_version = ""

    help = false
    reads = "data/*{1,2}.fastq.*"
    outdir = "./results"
    version = version
    nf_required_version = nf_required_version
    clusterOptions = false
    tracedir = "${params.outdir}/pipeline_info"
}

profiles {
    standard {
      includeConfig 'conf/base.config'
    }
    docker   {
      docker.enabled = true
      process.container = params.container
    }
    planet   {
      includeConfig 'conf/base.config'
    }
    none     {
  // Don't load any config (for use with custom home configs)
    }
}

timeline {
  enabled = true
  file = "${params.tracedir}/pipeline_info/timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/pipeline_info/report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/pipeline_info/trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_info/dag.svg"
}

manifest {
  name = 'SLU-AMB-16S_rRNA'
  description = 'Pre-processing and DADA2 processing of 16S rRNA data'
  homePage = 'https://github.com/SLU-AMB/read-preprocessing'
  pipelineVersion = '0.0.1dev'
  mainScript = 'main.nf'
  nextflowVersion = '>=0.30.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
